// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccommodationStars {
  THREE_STAR
  FOUR_STAR
  FIVE_STAR
}

model Tour {
  id               Int                   @id @default(autoincrement()) @db.Integer
  title            String                @db.Text
  shortDescription String?               @db.Text
  description      String?               @db.Text
  isDirectBooking  Boolean               @default(false) @db.Boolean
  isBestSeller     Boolean               @default(false)
  location         String?               @db.Text
  durationDays     Int                   @default(1) @db.Integer
  includes         String?               @db.Text
  excludes         String?               @db.Text
  createdAt        DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime              @default(now()) @db.Timestamptz(3)
  price            TourPrice[]
  categories       Category[]
  program          TourProgramFragment[]
  images           TourImage[]
  inclusions       TourInclusion[]
  exclusions       TourExclusion[]
  accommodations   TourAccommodation[]
}

model TourAccommodation {
  id        Int                @id @default(autoincrement()) @db.Integer
  tourId    Int                @db.Integer
  stars     AccommodationStars
  hotelName String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  tour Tour @relation(fields: [tourId], references: [id])
}

model TourInclusion {
  id          Int      @id @default(autoincrement()) @db.Integer
  tourId      Int      @db.Integer
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tour Tour @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TourExclusion {
  id          Int      @id @default(autoincrement()) @db.Integer
  tourId      Int      @db.Integer
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tour Tour @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TourImage {
  id        Int      @id @default(autoincrement()) @db.Integer
  tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tourId    Int      @db.Integer
  url       String   @db.Text
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

model TourProgramFragment {
  id          Int      @id @default(autoincrement()) @db.Integer
  tour        Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tourId      Int      @db.Integer
  order       Int      @db.Integer
  startTime   String   @db.Text
  title       String   @db.Text
  description String   @db.Text
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @db.Timestamptz(3)
}

model Category {
  id          Int      @id @default(autoincrement()) @db.Integer
  name        String   @db.Text
  description String?  @db.Text
  imageUrl    String?  @db.Text
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @db.Timestamptz(3)
  tours       Tour[]
}

model TourPrice {
  id         Int      @id @default(autoincrement()) @db.Integer
  tour       Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tourId     Int      @db.Integer
  currency   Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currencyId Int      @db.Integer
  amount     Float    @default(1) @db.DoublePrecision
  comment    String?  @db.Text
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime @default(now()) @db.Timestamptz(3)
}

model Currency {
  id         Int         @id @default(autoincrement()) @db.Integer
  tourPrices TourPrice[]
  code       String      @unique @default("USD") @db.Text
  createdAt  DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime    @default(now()) @db.Timestamptz(3)
}
